fp.df<- read.csv("Faceplate.csv")
library(arules)

#remove first column and convert to matrix
fp.mat <- as.matrix(fp.df[,-1])

#convert the binary incidence matrix into transaction database
fp.trans<- as(fp.mat, "transactions")
inspect(fp.trans)

##get rules
#when running apriori(), include minimum support, minimum confidence, and target as arguments
rules<- apriori(fp.trans, parameter = list(supp=0.2, conf = 0.5, target = "rules"))

#inspect the first six rules, sorted by lift
inspect(head(sort(rules, by= "lift"), n=6))

##################################
#Bigger example
##################################

all.books.df <- read.csv("CharlesBookClub.csv")

#create binary incidence matrix
count.books.df<- all.books.df[,8:18]
incid.books.df<- ifelse(count.books.df> 0,1,0)
incid.books.mat<- as.matrix(incid.books.df[,-1])

#convert the binary incidence matrix into a transactions database
books.trans<- as(incid.books.mat, "transactions")
inspect(books.trans)

#plot data
itemFrequencyPlot(books.trans)

# run apriori function
rules<- apriori(books.trans, parameter = list(supp = 200/4000, conf = 0.5, target = "rules"))

#inspect results
inspect(sort(rules, by = "lift"))


#collaborative filtering
library(recommenderlab)
#simulate matrix with 1000 users and 100 movies
m <- matrix(nrow=1000, ncol = 100)
#simularted ratings (1% of data)
m[sample.int(100*1000, 1000)] <- ceiling(runif(1000,0,5))
##convert to realratingmatrix
r<-as(m, "realRatingMatrix")

#user based collaborative filtering
UB.Rec<- Recommender(r, "UBCF")
pred<-predict(UB.Rec, r, type="ratings")
as(pred, "matrix")

# item based collaborative filtering
IB.REC <- Recommender(r, "IBCF")
pred<-predict(IB.REC, r, type="ratings")
as(pred, "matrix")
